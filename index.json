[{"content":"Rules  If a module named human has no submodules, you should put the declaration for the human in a file named human.rs If a module named human does have a submodule, you should put the declarations for human in a file named human/mod.rs  Example\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  /* src/lib.rs */pubmod Human;/* src/human/mod.rs */pubmod social;pubmod action;/* src/human/social.rs */pubfn have_fun(){println!(\u0026#34;Have fun\u0026#34;);}/* src/human/action.rs */pubfn walk(){println!(\u0026#34;walking\u0026#34;);}/* src/main.rs */usemy_project_name::human;fn main(){human::social::have_fun();human::action::walk();}  ","permalink":"https://darve.sh/posts/rust/modules/","summary":"Rules  If a module named human has no submodules, you should put the declaration for the human in a file named human.rs If a module named human does have a submodule, you should put the declarations for human in a file named human/mod.rs  Example\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  /* src/lib.","title":"Rust: Modules"},{"content":"1  letgreeting=\u0026#34;Good morning\u0026#34;;  greeting is a string literal and they are immutable. The reason why it\u0026rsquo;s immutable is explained below.\nIn Rust, you can store part of the String and they are called String slices. For example,\n1 2 3 4  letstr=String::from(\u0026#34;Hello there\u0026#34;);lethello=\u0026amp;str[0..4];letthere=\u0026amp;str[6..10];  hello and there are String slices. They store references to the portion of the String.\nNow let\u0026rsquo;s talk about why string literals are immutable. The string literals are literally slices of a string. Imagine that the value Good morning is stored on the heap(in a memory location called temp) then the greeting variable is basically temp[0..temp.len()] (can write as temp[..])\nAs I mentioned in the ownership chapter, if you have an immutable reference to a variable, you cannot take a mutable reference for the same.\nHere is an example.\n1 2 3 4 5 6 7 8 9 10  fn main(){letstr=String::from(\u0026#34;Hello there\u0026#34;);lethello=\u0026amp;str[0..4];letthere=\u0026amp;str[6..10];/*this will result in an error because `hello` a `there` already have an immutable reference to `str`*/str.clear();}  ","permalink":"https://darve.sh/posts/rust/string-literals-and-slices/","summary":"1  letgreeting=\u0026#34;Good morning\u0026#34;;  greeting is a string literal and they are immutable. The reason why it\u0026rsquo;s immutable is explained below.\nIn Rust, you can store part of the String and they are called String slices. For example,\n1 2 3 4  letstr=String::from(\u0026#34;Hello there\u0026#34;);lethello=\u0026amp;str[0..4];letthere=\u0026amp;str[6..10];  hello and there are String slices. They store references to the portion of the String.\nNow let\u0026rsquo;s talk about why string literals are immutable.","title":"Rust: String Literals and Slices"},{"content":"Work in progress\n","permalink":"https://darve.sh/posts/tools-of-the-trade/","summary":"Work in progress","title":"What I use"}]